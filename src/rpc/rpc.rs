use jsonrpsee::{
    core::{RpcResult, async_trait},
    proc_macros::rpc,
    types::{ErrorObject, error::INTERNAL_ERROR_CODE},
};

use std::sync::Arc;
use tokio::sync::Mutex;

use crate::blockchain::Blockchain;

#[rpc(server)]
// Listing all RPC methods for Speed Blockchain
pub trait SpeedBlockchainRpc {
    /// Get block count
    #[method(name = "eth_blockNumber")]
    async fn get_block_number(&self) -> RpcResult<u64>;
    /// Create transaction on Speed Blockchain
    #[method(name = "eth_sendTransaction")]
    async fn create_transaction(
        &self,
        from: String,
        to: String,
        amount: u64,
        fee: u64,
    ) -> RpcResult<String>;
}

fn error_to_rpc<E: std::fmt::Display>(err: E) -> ErrorObject<'static> {
    ErrorObject::owned(INTERNAL_ERROR_CODE, err.to_string(), None::<()>)
}
// Holds blockchain data
pub struct SpeedRpcImpl {
    speed_blockchain: Arc<Mutex<Blockchain>>, // This is the "kitchen equipment"
}

impl SpeedRpcImpl {
    // Initialize the RPC implementation with a blockchain instance
    pub fn new(blockchain: Blockchain) -> Self {
        Self {
            speed_blockchain: Arc::new(Mutex::new(blockchain)),
        }
    }
}

// Implement the RPC methods. (SpeedBlockchainRpcServer trait is auto-generated by rpc macro)
#[async_trait]
impl SpeedBlockchainRpcServer for SpeedRpcImpl {
    // get block count
    async fn get_block_number(&self) -> RpcResult<u64> {
        let chain = self.speed_blockchain.lock().await;

        chain.get_last_index().await.map_err(error_to_rpc)
    }

    // Create a transaction
    async fn create_transaction(
        &self,
        from: String,
        to: String,
        amount: u64,
        fee: u64,
    ) -> RpcResult<String> {
        let mut chain = self.speed_blockchain.lock().await;

        // Create a transaction and add it to the mempool
        let tx = chain
            .create_transaction(from, to, amount, fee)
            .await
            .map_err(error_to_rpc)?;

        // Return the transaction ID
        Ok(tx)
    }
}
